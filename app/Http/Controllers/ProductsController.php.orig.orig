<?php

namespace Salesfly\Http\Controllers;

use Illuminate\Http\Request;

use Illuminate\Support\Facades\View;
use Mockery\Matcher\Type;
use Salesfly\Http\Requests;
use Salesfly\Http\Controllers\Controller;

use Salesfly\Salesfly\Managers\DetPresManager;
use Salesfly\Salesfly\Managers\StockManager;
use Salesfly\Salesfly\Repositories\DetPresRepo;
use Salesfly\Salesfly\Repositories\ProductRepo;
use Salesfly\Salesfly\Managers\ProductManager;
use Salesfly\Salesfly\Repositories\StockRepo;
use Salesfly\Salesfly\Repositories\VariantRepo;
use Salesfly\Salesfly\Managers\VariantManager;

use Salesfly\Salesfly\Entities\Brand;
use Salesfly\Salesfly\Entities\Ttype;
use Salesfly\Salesfly\Entities\Material;
use Salesfly\Salesfly\Entities\Station;

class ProductsController extends Controller
{
    protected $productRepo;
    protected $variantRepo;
    protected $detPres;

    public function __construct(ProductRepo $productRepo, VariantRepo $variantRepo, DetPresRepo $detPres)
    {
        $this->productRepo = $productRepo;
        $this->variantRepo = $variantRepo;
        $this->detPres = $detPres;
        $this->middleware('auth');
        //$this->middleware('role:admin');
    }

    /**
     * Display a listing of the resource.
     *
     * @return Response
     */
    public function index()
    {
        //
        return View('products.index');
    }

    public function all()
    {
        $products = $this->productRepo->all();
        return response()->json($products);
        //var_dump($customers);
    }

    public function paginate(){
        $products = $this->productRepo->paginate(15);
        return response()->json($products);
    }
    public function autocomplit(){
         $products = $this->productRepo->Autocomplit();
        return response()->json($products);
    }
<<<<<<< HEAD
    
=======
        public function pag(){
        $products = $this->productRepo->pag();
        return response()->json($products);
    }
>>>>>>> a94cf47241561cdb396397ed604ce8ce62602295
    public function misDatosVariantes($store,$were,$q){
        $products = $this->productRepo->misDatosVariantes($store,$were,$q);
        return response()->json($products);
    }
<<<<<<< HEAD
    public function misDatos($store,$were,$q){
        $products = $this->productRepo->misDatos($store,$were,$q);
        return response()->json($products);
    } 
    public function favoritos($store,$were,$q){
        $products = $this->productRepo->favoritos($store,$were,$q);
        return response()->json($products);
    } 
=======
    public function misDatos($store,$were,$q)
    {
        $products = $this->productRepo->misDatos($store, $were, $q);
        return response()->json($products);
    }
>>>>>>> a94cf47241561cdb396397ed604ce8ce62602295

    public function form_create()
    {
        return View('products.form_create');
    }

    public function form_edit()
    {
        return View('products.form_edit');
    }

    public function create(Request $request)
    {
        //var_dump($request->input('presentations')); die();
        $product = $this->productRepo->getModel();
        $variant = $this->variantRepo->getModel();
        $detPres = $this->detPres->getModel();

        if ($request->input('estado') == 1) {}else{$request->merge(array('estado' => '0'));};
        if ($request->input('hasVariants') == 1) {}else{$request->merge(array('hasVariants' => '0'));};
        if ($request->input('track') == 1) {}else{$request->merge(array('track' => '0'));};

        $managerPro = new ProductManager($product,$request->except('sku','suppPri','markup','price','track'));
        //================================PROD CON VARIANTES==============================//
        if($request->input('hasVariants') === true){
            $managerPro->save();
            $request->merge(array('product_id' => $product->id));
            $product->quantVar = 0; //cantidad de variantes igual a 0;
            $product->save();
            //$managerVar = new VariantManager($variant,$request->only('sku','suppPri','markup','price','track','product_id'));
            //$managerVar->save();
            //================================./PROD CON VARIANTES==============================//


            //================================PROD SIN VARIANTES==============================//
        }elseif($request->input('hasVariants') === '0'){
            $managerPro->save();
            $request->merge(array('product_id' => $product->id));
            $product->quantVar = 0;
            $product->save();
            $managerVar = new VariantManager($variant,$request->only('sku','suppPri','markup','price','track','product_id'));
            $managerVar->save();


                foreach($request->input('presentations') as $presentation){
                    $presentation['variant_id'] = $variant->id;
                    $presentation['presentation_id'] =  $presentation['id'];
                    $oPres = new DetPresRepo();
                    $presManager = new DetPresManager($oPres->getModel(),$presentation);
                    $presManager->save();
                }
                if($request->input('track') == 1) {
                    foreach ($request->input('stock') as $stock) {
                        $stock['variant_id'] = $variant->id;
                        $oStock = new StockRepo();
                        $stockManager = new StockManager($oStock->getModel(), $stock);
                        $stockManager->save();
                    }
                }

        }

        //================================./PROD SIN VARIANTES==============================//

        return response()->json(['estado'=>true, 'nombres'=>$product->nombre]);
    }

    public function show()
    {
        return View('products.show');
    }

    public function find($id)
    {
        $product = $this->productRepo->find($id);
        //sleep(5);
        return response()->json($product);
    }

    public function edit(Request $request)
    {
        //var_dump($request->all());die();

        //$customer = $this->customerRepo->find($request->id);
        //$manager = new CustomerManager($customer,$request->except('fechaNac'));
        //$manager->save();

        $product = $this->productRepo->find($request->id);

        //$detPres = $this->detPres->getModel();

        if ($request->input('estado') == 1) {}else{$request->merge(array('estado' => '0'));};
        if ($request->input('hasVariants') == 1) {}else{$request->merge(array('hasVariants' => '0'));};
        if ($request->input('track') == 1) {}else{$request->merge(array('track' => '0'));};

        $managerPro = new ProductManager($product,$request->except('sku','suppPri','markup','price','track'));
        //================================PROD CON VARIANTES==============================//
        if($request->input('hasVariants') === true){
            $managerPro->save();
            $request->merge(array('product_id' => $product->id));
            $product->quantVar = 0; //cantidad de variantes igual a 0;
            $product->save();
            //$managerVar = new VariantManager($variant,$request->only('sku','suppPri','markup','price','track','product_id'));
            //$managerVar->save();
            //================================./PROD CON VARIANTES==============================//


            //================================PROD SIN VARIANTES==============================//
        }elseif($request->input('hasVariants') === '0'){
            $managerPro->save();
            $request->merge(array('product_id' => $product->id));
            $product->quantVar = 0; //aunq presenta una fila en la tabla variantes por defecto
            $product->save();
            $variant = $this->variantRepo->getModel()->where('product_id',$product->id)->first();
            $managerVar = new VariantManager($variant,$request->only('sku','suppPri','markup','price','track','product_id'));
            $managerVar->save();

            //var_dump($request->input('presentations')); die();
            $variant->presentation()->detach();
            foreach($request->input('presentations') as $presentation){
                //var_dump('o'); die();
                $presentation['variant_id'] = $variant->id;
                $presentation['presentation_id'] =  $presentation['id'];
                $detpresRepo = new DetPresRepo();
                //$oPres = $detpresRepo->getModel()->where('presentation_id',$presentation['presentation_id'])->where('variant_id',$presentation['variant_id'])->first();
                $oPres = $detpresRepo->getModel();
                $presManager = new DetPresManager($oPres,$presentation);
                $presManager->save();
            }
            if($request->input('track') == 1) {
                $variant->warehouse()->detach();
                foreach ($request->input('stock') as $stock) {
                    $stock['variant_id'] = $variant->id;
                    $stockRepo = new StockRepo();
                    //$oStock = $stockRepo->getModel()->where('variant_id',$stock['variant_id'])->where('warehouse_id',$stock['warehouse_id'])->first();
                    $oStock = $stockRepo->getModel();
                    $stockManager = new StockManager($oStock, $stock);
                    $stockManager->save();
                }
            }

        }
        //================================./PROD SIN VARIANTES==============================//

        return response()->json(['estado'=>true, 'nombres'=>$product->nombre]);
    }

    /*public function destroy(Request $request)
    {
        $customer= $this->customerRepo->find($request->id);
        $customer->delete();
        //Event::fire('update.customer',$customer->all());
        return response()->json(['estado'=>true, 'nombre'=>$customer->nombre]);
    }

    public function search($q)
    {
        //$q = Input::get('q');
        $customers = $this->customerRepo->search($q);

        return response()->json($customers);
    }*/
    public function brands_select(){
        $brands = Brand::lists('nombre','id');
        return response()->json($brands);
    }
    public function materials_select(){
        $materials = Material::lists('nombre','id');
        return response()->json($materials);
    }
    public function types_select(){
        $types = Ttype::lists('nombre','id');
        return response()->json($types);
    }
    public function stations_select(){
        $stations = Station::lists('nombre','id');
        return response()->json($stations);
    }
    public function selectProducts(){
        $products = $this->productRepo->all();
        return response()->json($products);
    }
    public function search($q)
    {
        //$q = Input::get('q');
        $stations = $this->productRepo->search($q);

        return response()->json($stations);
    } 
}
